Güncel Bilgi Teknolojileri Kavramları
=====================================
:toc2:
:icons:
:iconsdir: /usr/local/etc/asciidoc/images/icons/
:data-uri:
:pygments:
:encoding: UTF-8
:numbered:

.Ders notları
https://github.com/fehmicansaglam/sunumlar

.Fehmi Can Sağlam kimdir?
* http://twitter.com/fehmicansaglam
* http://github.com/fehmicansaglam
* http://fehmicansaglam.net


== Neler öğreneceğiz? ==

* Yıllara direnen teknolojiler/kavramlar
* Son yıllarda bilgi teknolojilerinde öne çıkan kavramlar
* Güncel sorunlara güncel çözümler
* Yeni teknolojilerin artıları ve eksileri
* Anti-pattern haline gelen kavramlar


== Kitap önerileri ==

=== Design Patterns ===

Elements of Reusable Object-Oriented Software

Tasarım Desenleri konusunda en popüler ve dolu kitap. +

+"Gang of Four"+

* Erich Gamma
* Richard Helm
* Ralph Johnson
* John Vlissides

=== Getting Good with Git ===

Git sürüm kontrol sistemi için en anlaşılır kitap.

* Andrew Burgess

=== The Pragmatic Programmer ===

Programcılara geliştirme sürecinin her aşaması için tavsiyeler barındırıyor.

* Andrew Hunt
* David Thomas

=== Refactoring: Improving the Design of Existing Code ===

Mevcut kodu refactor etme üzerine kurulsa da kaliteli kod yazmak için önemli bilgiler içeriyor.

* Martin Fowler


== Neden bir sürüm kontrol sistemi kullanmalıyım? ==

* Kod ile özgürce oynamak için
Herhangi bir şeyi kırmaktan korkmadan kod yazın
* Özgürce dallanmak için
Yazılımınızın farklı sürümlerini kolayca yönetin
* Özgürce paylaşmak için
İstediğiniz sayıda geliştirici ile birlikte çalışın

=== Dağıtık sürüm kontrol sistemleri ===

SVN gibi merkezi sürüm kontrol sistemlerinin yerini Git, Hg vb. dağıtık sürüm kontrol sistemleri aldı. Github Git desteği, Bitbucket ise hem Git hem de Hg desteği veriyor.

* Merkezi sürüm kontrol sistemleri sunucu bağımlıdır. Internet/Intranet bağlantınız yoksa bu sistemleri kullanamazsınız.

* Dağıtık sürüm kontrol sistemlerinde her bir kopya ayrı bir depodur. Sürüm kontrolü işlevleri için başka bir makinaya ihtiyaç yoktur.

=== Git ===

* Bir sürüm kontrol yöneticisi
* Dağıtık sürüm kontrolü
* Linux kernel geliştirme için Linus Torvalds tarafından tasarlandı ve geliştirildi

==== Tarihçe ====

* Git geliştirmesi çok sayıda Linux kernel geliştiricisi ticari BitKeeper sistemini kullanmaktan vazgeçtikten sonra başladı.
* Larry McVoy, Andrew Tridgell'ın BitKeeper protokollerini tersine mühendislik ile elde ettiği iddiası ile BitKeeper'ın ücretsiz kullanım hakkını geri aldı.
* Git geliştirme süreci 3 Nisan 2005 tarihinde başladı.
* Birden fazla dalın ilk kez birleştirilmesi 18 Nisan'da yapıldı.
* Torvalds performans hedeflerine 29 Nisan'da ulaştı.
* 16 Haziran'da kernel 2.6.12 Git ile yönetilmeye başlandı.

==== Tasarım Kriterleri ====

* CVS'i ne yapılmayacağına dair örnek olarak al; eğer kararsız kalırsan tam tersini yap.
* Dağıtık, BitKeeper benzeri bir akış sağla.
* Bozulmaya karşı çok dayanıklı ol.
* Çok yüksek performans sağla.

==== Neden Git Kullanmalıyım? ====

* http://git-scm.com/about
* Maliyetsiz yerel dallanma
* Hızlı
* Az disk kullanımı
* Dağıtık (Çevrimdışı çalışmaya izin verir)
* Staging area(*)
* Herhangi bir akışı destekler


=== Git flow ===

Git depolarını derli toplu tutmak adına bir model ve bu modeli kullanmayı oldukça kolaylaştıran git eklentilerini içeren git-flow isimli bir proje.

image:images/git-flow.png[]


== Temel Programlama Prensipleri ==

=== En az hata içeren kod, hiç olmayan koddur. ===
Programcıların bence en büyük yanılgılarından biri görevlerinin kod yazmak olduğunu zannetmeleridir. Oysa programcıların asıl görevi bir ihtiyacı gerçeklemek, bir sorunu çözmektir. Eğer bir sorunu hiç kod yazmadan çözebiliyorsanız öyle yapın. Çünkü her yeni kod beraberinde yeni hatalar getirecek ve ayrıca yazılımın karmaşıklığını artırarak sürdürülebilirliği azaltacaktır. Bu sebeple bir satır kod yazmadan önce iki kere düşünün.

=== YAGNI(You ain't gonna need it) ===
Eğer bir API yazmıyorsanız ileride şuna da ihtiyacım olur diyerek hayali kodlar üretmeyin. Bu kodlar test süreçlerini de düşünürsek size tahmininizden fazla zaman kaybettirecektir. Ayrıca programınız olması gerekenden daha karmaşık hale gelecektir. Bundan dolayı gerçekten ihtiyacınız olana dek programınıza yeni özellikler eklemeyin.

=== KISS(Keep it simple, Stupid!) ===
KISS ilkesinin aslında birden fazla açılımı bulunuyor ancak benim en çok sevdiğim açılımı "Keep it simple, Stupid! (Şunu basit tut, gerizekalı!)" şeklinde olanıdır. Programcılar karmaşığa eğilimlidirler. Oysa bu eğilim bir süre sonra sürdürülemez yazılımlara dönüşür. Bu sebeple yazdığınız kodu sizden sonra okuyacak insanlar olacağını da düşünerek çözüme giden en basit ve en anlaşılır yolu bulmaya çalışın.

=== DRY(Don't Repeat Yourself) ===
Eğer aynı kodu ikiden fazla yerde tekrarlıyorsanız durup bir düşünün. Mümkünse tekrar eden kodları içeren fonksiyonlar/metotlar oluşturun ve başkalarının da kolayca kullanabilmesi için bu fonksiyonları/metotları uygun şekilde belgelendirin.

=== Her aptal, bilgisayarın anlayabileceği kodu yazabilir. İyi programcılar insanların anlayabileceği şekilde kod yazarlar. ===
Bu söz hem kendi kendini belgelendiren kodu hem de kod içerisine düzgün şekilde yerleştirilmiş yorum satırlarını ifade ediyor. Üşenmeyin, kodu belgelendirin. Unutmayın en iyi programcılar asla üşenmezler.


== Programlama paradigmaları ==

=== Nesne Yönelimli Programlama (OOP) ===

* Miras alma (Inheritance)
* Sarmallama (Encapsulation)
* Çok biçimlilik (Polymorphism)

=== Procedural, Functional ve OO diller ===

* Procedural diller(Imperative)
* C, Fortan, COBOL
* OO diller
* C++, Java, C#, Python, Ruby
* Functional diller(Declarative, Fibonacci örneği)
* Iteration yerine tail recursion Haskell(*), Scala

=== Static vs. Dynamic typing ===

* Static typing'de tür kontrolü derleme aşamasında yapılır.
C, C++, Java
* Dynamic typing'de değerlerin türleri vardır, değişkenlerin yoktur.
Erlang, JavaScript, Python, Ruby
* Duck typing: Eğer bir ördek gibi vaklıyorsa bu bir ördektir.
Ruby, Python, JavaScript

== Tasarım desenleri ==

* Nesne yönelimli yazılım tasarımı zordur, tekrar kullanılabilen(gerekli mi?) nesne yönelimli yazılım tasarımı daha da zordur.
* Başarılı tasarım esnektir, geliştirmeye uygundur ve tekrar kullanılabilir.
* Tasarım desenleri başarılı tasarım ve mimarilerin tekrar tekrar kullanılabilmesini kolaylaştırır.
* Tasarımcının doğru tasarımı hızlıca elde etmesini sağlar.

=== Singleton(Creational) ===

Bir sınıfa ait yalnız bir nesne olmasını garanti eder ve bu nesneye erişim için genel bir yöntem tanımlar.

=== Adapter(Structural) ===

Bir sınıfın interface'ini istemcinin beklediği interface'e dönüştürür. Adapter uyumsuz interface'ler yüzünden birlikte çalışamayacak olan sınıfların birlikte çalışabilmesini sağlar.

=== Observer(Behavioral) ===

Sınıflar arasında öyle bir ilişki tanımla ki bir sınıfın durumu(state) değiştiğinde tüm bağımlı sınıflar haberdar olsunlar ve otomatik olarak güncellensinler.


== Web ==

=== HTTP ===

Hypertext Transfer Protocol

* GET
* PUT
* POST
* DELETE

=== Stateful vs. Stateless ===

* Stateful mimarilerin ölçeklenmesi zordur.
* HTTP protokolü stateless'tır.
* Stateless web mimarisinde state cookie içinde saklanır.
* Sunucu taraflı state için cache ya da veritabanı kullanılır.

=== Blocking vs. Non-blocking IO ===

* C10k problem
* Tornado(Friendfeed)
* Netty(NIO client-server framework)
* nginx
* node.js

=== MVC Web frameworkler ===

* Play! Framework (Java)
* Django (Python)
* Ruby on Rails (Ruby)

=== MVC ===

* Model, uygulamanın işlem yaptığı bilginin domain-specific olarak gösterimidir. Domain logic ham veriye anlam katar(Model metodları).
* View, modeli ihtiyaca uygun bir formata dönüştürür. Web uygulamalarında bu formatlar genelde HTML, XML ya da JSON olmaktadır.
* Controller, olaylara tepki verir, onları işler ve gerekirse model üzerinde değişiklik yapacak metodları çağırır. Web uygulamasında olaylar HTTP istekleridir.

image:images/mvc.png[]

=== Dependency Injection (Inversion of Control) ===

+"Hollywood Principle: Don't call us, we'll call you"+

=== Object-relational mapping (ORM) ===

* Hibernate
* Toplink
* JPA
* ActiveRecord (RoR, Play! Framework(*))

=== AJAX Push ===

* Polling
* Long polling
* Web sockets
* SSE

=== Concurrency ===

* Senkronizasyon
* Mutability vs. Immutability

== NoSQL ==

https://plus.google.com/communities/101801061850864423549[Ankara NoSQL Topluluğu]

* Schemaless design
* MongoDB
* Neo4j
* ElasticSearch

== Javascript'in Yükselişi ==

=== Node.js ===

[source,javascript]
----------------------------------------------------------------------
var http = require('http');

http.createServer(function (request, response) {
    response.writeHead(200, {'Content-Type': 'text/plain'});
    response.end('Hello World\n');
}).listen(8000);
 
console.log('Server running at http://localhost:8000/');
----------------------------------------------------------------------

=== Client Side MV* ===

http://addyosmani.github.com/todomvc/

* Backbone.js
* AngularJS
* Ember.js
* KnockoutJS
* ...

=== Meteor.js ===

http://meteor.com/screencast

(Sunucu ve istemci taraflı kodu bir araya getiriyor)

=== CoffeeScript ===

[source,coffeescript]
----------------------------------------------------------------------
icecekler = ['bira', 'cola', 'rakı']
alkolluler = (icecek for icecek in icecekler when icecek isnt 'cola')
----------------------------------------------------------------------

[source,javascript]
----------------------------------------------------------------------
var alkolluler, icecek, icecekler;

icecekler = ['bira', 'cola', 'rakı'];

alkolluler = (function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = icecekler.length; _i < _len; _i++) {
    icecek = icecekler[_i];
    if (icecek !== 'cola') {
      _results.push(icecek);
    }
  }
  return _results;
})();
----------------------------------------------------------------------


== Teknoloji Mezarlığı ==

* Flash
* Flex


== Cloud ==

* +Internet'ten Ulaştırma Bakanlığı sorumlu olduğuna göre Bulut Bilişim'den Meteoroloji Genel Müdürlüğü sorumlu olsun.+
* PAAS, SAAS
* Heroku
* Amazon


== MOOC ==

Massive Open Online Course

* Coursera
* Udacity
* ...



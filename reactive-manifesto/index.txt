Reactive Manifesto
==================
:author: Fehmi Can Sağlam
:toc2:
:icons:
:iconsdir: /usr/local/etc/asciidoc/images/icons/
:data-uri:
:pygments:
:encoding: UTF-8
:backend: slidy
:max-width: 45em

Fehmi Can Sağlam
----------------
* http://twitter.com/fehmicansaglam
* http://github.com/fehmicansaglam
* http://fehmicansaglam.net
* Yaptığım sunumların slaytları Github hesabımda bulunuyor.

Kaynakça
--------
* http://www.reactivemanifesto.org/
* http://www.typesafe.com/blog/why_do_we_need_a_reactive_manifesto%3F
* http://pchiusano.blogspot.com/2013/11/the-reactive-manifesto-is-not-even-wrong.html
* http://sadache.tumblr.com/post/42351000773/async-reactive-nonblocking-threads-futures-executioncont[Playframework: Async, Reactive, Threads, Futures, ExecutionContexts]

Neden?
------
* Uygulama gereksinimleri son yıllarda dramatik ölçüde değişti.
* Çok çekirdekli işlemciler ve bulut bilişim günümüzün standartları haline geldi.
* Kullanıcılar daha hızlı ve her zaman yanıt verebilen, ölçeklenebilir uygulamalara ihtiyaç duyuyorlar.
* Bu gelişmeler uygulamaların artık farklı yöntemlerle geliştirilmesini gerektiriyor.

Amaç
----
* Söz konusu uygulamalara Reactive Uygulamalar adını veriyoruz.
* Reactive mimari geliştiricilerin olay tabanlı, ölçeklenebilir, çabuk iyileşen ve hızlı tepki veren sistemler geliştirebilmesini sağlıyor.
* Hemen her platform kendi çözümünü ve jargonunu üretmiş durumda.
* Reactive Manifesto ise bu yöntemler için ortak bir dil tanımlama amacı güdüyor.
* Bu nedenle Reactive Manifesto yalnızca ilkelerden ibaret.

Olay sürülen (Event driven)
---------------------------
* Asenkron haberleşme üzerine kurulu uygulamalar çok daha kolay "loosely coupled" tasarlanabilir.
* Gönderici ve alıcı birbirinden bağımsız geliştirilebilir.
* Alıcı bir olay oluşana kadar hareketsiz durduğundan çok sayıda alıcı tek bir hardware thread'ini paylaşabilir.
* Yapıtaşları
** Asenkron haberleşme (message passing)
** Non-blocking
** Geliştirmenin başlangıcından itibaren her katmanda reactive

Ölçeklenebilir (Scalable)
-------------------------
* İhtiyaca göre scale out ya da scale in
* İhtiyaca göre scale up ya da scale down
* Yapıtaşları
** Olay sürülen
** Konumsal şeffaflık (Location transparency)

Çabuk iyileşen (Resilient)
--------------------------
* Hatalar birinci sınıf vatandaştır.
* Başlangıçtan itibaren tasarımın içindedirler.
* Yapıtaşları
** Olay sürülen
** Hataların izolasyonu
** Bileşen hiyerarşisi sayesinde hata ile en uygun yerde baş edilmesi

Tepki veren (Responsive)
------------------------
* Gerçek zamanlı etkileşim
* Düşük gecikme
* Yapıtaşları
** Observable models
** Event streams
** Stateful clients

Nasıl?
------
* Çoğu platform kendi araçlarını sunuyor.
* Typesafe Stack ile
** Scala
** Akka
** Play Framework
** ReactiveMongo (Zenexity tarafından geliştiriliyor)
** Spray (akka-http adını alarak Akka ailesine katılacak)

Muhalif görüşler
----------------
* http://pchiusano.blogspot.com/2013/11/the-reactive-manifesto-is-not-even-wrong.html
* Çok genel, yeni bir şey sunmuyor, hatta hiçbir şey sunmuyor.

Teşekkürler
-----------
* http://twitter.com/fehmicansaglam
* http://github.com/fehmicansaglam
* http://fehmicansaglam.net
* Yaptığım sunumların slaytları Github hesabımda bulunuyor.

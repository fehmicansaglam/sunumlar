Reactive Web Programlama
========================
:toc2:
:icons:
:iconsdir: /usr/local/etc/asciidoc/images/icons/
:data-uri:
:pygments:
:encoding: UTF-8
:numbered:

.Fehmi Can Sağlam
* http://twitter.com/fehmicansaglam
* http://github.com/fehmicansaglam
* http://fehmicansaglam.net

.Kaynakça

* http://en.wikipedia.org/wiki/C10k_problem[C10k problem]
* http://www.kegel.com/c10k.html[The C10K problem]
* http://zef.me/883/the-share-nothing-architecture[The Share-Nothing Architecture]
* http://en.wikipedia.org/wiki/Shared_nothing_architecture[Shared nothing architecture]
* http://www.eaipatterns.com/docs/IEEE_Software_Design_2PC.pdf[Your Coffee Shop Doesn’t
Use Two-Phase Commit]
* http://sadache.tumblr.com/post/42351000773/async-reactive-nonblocking-threads-futures-executioncont[Playframework: Async, Reactive, Threads, Futures, ExecutionContexts]
* http://doc.akka.io/docs/akka/snapshot/scala/futures.html[Futures (Scala)]


== Ölçeklenebilirlik

=== C1OK
C10K = Concurrent ten thousand connections

==== HTTP
HTTP functions as a request-response protocol in the client-server computing model.

==== Long polling
Long polling is a variation of the traditional polling technique and allows emulation of an information push from a server to a client.

CAUTION: Uygulamanıza aynı anda onbinlerce istek geldiğinde ne olacak?

=== Ölçekleme
Gereksinimlerinize ya da imkanlarınıza göre sisteminizi farklı şekillerde ölçekleyebilirsiniz.

==== Yatay ölçekleme (Scala out/Scale down)
Add more nodes to a system, such as adding a new computer to a distributed software application.

==== Dikey (Scale up)
Add resources to a single node in a system, typically involving the addition of CPUs or memory to a single computer.

==== Share nothing
* Stateful mimarilerin ölçeklenmesi zordur.
* HTTP protokolü stateless'tır.
* Stateless web mimarisinde state cookie içinde saklanır.
* Sunucu taraflı state için cache ya da veritabanı kullanılır.

==== Parallelism
Paralel donanımlar üzerinde programları daha hızlı koşmak.

==== Concurrency
İş parçacıklarının eş-zamanlı olarak koşmalarını yönetmek.

=== Temel problem
[source,scala]
----
var x = 0
async { x = x + 1 }
async { x = x * 2 }
// muhtemel sonuçlar 0, 1, 2
----

* Eş-zamanlı iş parçacıklarının paylaşımlı değişken durumlara(mutable shared state) erişmesi rasgeleliğin sebebidir.

----
non-determinism = paralel işleme + değişken durum
----

* Rasgele olmayan işleme istiyorsak değişken durumdan(mutable state) sakınmamız gerekli.

==== Senkronizasyon maliyeti
Eğer mutable state varsa eş zamanlı çalışmanın senkronize edilmesi gerekir. Java’da aşağıdaki senkronizasyon araçları mevcuttur.

* Atomik veri yapıları (AtomicInteger, ...)
* Synchronized bloklar
* CountDownLatch
* CyclicBarrier
* Semaphore

*Eğer uygulamanızda mutable state yoksa senkronizasyon gibi bir sorununuz da yoktur.*

.Immutable Java sınıfı örneği
[source,java]
----
public final class MyImmutableClass { // extend edilemez

  // member değerleri construction anında setlenir
  private final String myImmutableKey;
  private final Date myImmutableDate;
  private final List<String> myImmutableList;

  public MyImmutableClass(String myImmutableKey, Date myImmutableDate,
      List<String> myImmutableList) {
    this.myImmutableKey = myImmutableKey;
    this.myImmutableDate = myImmutableDate;
    this.myImmutableList = myImmutableList;
  }

  public String getMyImmutableKey() {
    return myImmutableKey;
  }

  public Date getMyImmutableDate() {
    return new Date(myImmutableDate.getTime()); //defensive copying
  }

  public List<String> getMyImmutableList() {
    return Collections.unmodifiableList(myImmutableList);
  }
}
----


== Thread
.Temel thread oluşturma örneği
[source,java]
----
public class MyRunnable implements Runnable {
  public void run(){
    System.out.println("MyRunnable running");
  }
}

Thread thread = new Thread(new MyRunnable());
thread.start();
----

=== Sınırsız thread oluşturmanın dezavantajları

* *Thread Lifecycle overhead*

Thread oluşturma ve öldürme maliyetsiz değildir. Çoğu sunucu uygulamasında olduğu gibi istekler sık ve küçük ise her bir istek için yeni bir thread oluşturmak oldukça yüksek kaynak tüketimine sebep olur.

* *Resource consumption*

Aktif threadler sistem kaynaklarını(özellikle bellek) kullanırlar. Kullanılabilir işlemci sayısından daha fazla thread var ise threadler boş dururlar. Boş duran threadler gereksiz yere bellek kullanırlar. İşlemciler için yarışan çok sayıda thread var ise bu durum ayrıca performans kaybına sebep olabilir.

* *Stability*

Oluşturulabilecek thread sayısı sınırlıdır. Bu sınır stack size gibi parametrelere ve işletim sisteminin sınırlarına bağlıdır. Bu sınıra ulaştığınızda OOM gibi bir yanıt alırsınız. Bu durumu recover etmeye çalışmak risklidir. Bunun yerine uygulamanızı bu sınıra ulaşmayacak şekilde tasarlamanız daha kolaydır.


== Reactive programming
Programming in a non-blocking style.

=== Asynchronous
Starbucks order throughputu maximize etmek ister; çünkü daha fazla başarılı order daha fazla gelir anlamına gelir.

.Starbucks asynchronous model 
image:images/starbucks-async.png[]

=== Nonblocking
Nonblocking is a call that doesn't cause the caller (Thread) to be blocked waiting for a result, but rather provides a mechanism (often associated with callbacks) that allows the caller to schedule an action whenever the result is ready. Non-blocking is often used with IO operation since there is no CPU, thus no threads needed for accomplishing the task. This kind of programming can lead to a spaghetti disaster if not used with appropriate composition constructs.

.Nonblocking server örnekleri
* Tornado(Friendfeed)
* Netty(NIO client-server framework)
* nginx
* node.js

=== Futures
A construct that allows highly composable reactive programming.

[source,java]
----
interface Future<V> {
  boolean cancel(boolean)
  V get()
  V get(long, TimeUnit)
  boolean isCancelled()
  boolean isDone()
}
----

[source,scala]
----
val f1 = Future {
  "Hello" + "World"
}
val f2 = f1 map { x ⇒
  x.length
}
f2 foreach println
----

[source,scala]
----
val f1 = ask(actor1, msg1)
val f2 = ask(actor2, msg2)
 
val f3 = for {
  a ← f1.mapTo[Int]
  b ← f2.mapTo[Int]
  c ← ask(actor3, (a + b)).mapTo[Int]
} yield c
 
f3 foreach println
----


=== ThreadPool (ExecutionContext)
[source,java]
----
private final ExecutorService executor = Executors
    .newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);

private final CompletionService<Response> completionService = 
    new ExecutorCompletionService<Response>(executor);
----

[source,scala]
----
// An ExecutionContext with a ThreadPool
// that the same size as the ConnectionPool of our DB
val dbExecutionContext: ExecutionContext = ... 
val eventuallySql = Future {
 /* some sql here */
}(dbExecutionContext)

// hand the Future to Play
def getUser = Action {
  Async {
    eventuallySql.map( user =>
      Ok("user is: "+user)) 
  }
}
----


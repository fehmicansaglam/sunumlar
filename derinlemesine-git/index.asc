Advanced Git
============
:toc2:
:icons:
:iconsdir: /usr/local/etc/asciidoc/images/icons/
:data-uri:
:pygments:
:encoding: UTF-8
:numbered:

.Fehmi Can Sağlam
* http://twitter.com/fehmicansaglam
* http://github.com/fehmicansaglam
* http://fehmicansaglam.net

.Kaynakça
* http://git-scm.com/book
* http://fehmicansaglam.net/tanri-kullarina-yuru-gelistiricilere-derinlemesine-git-dedi/


== Git Internals

=== Git Objects

image:images/image-1.png[]

----
require 'zlib'
cf = File.open(".git/objects/14/e6771239af30fa3751600333792e5c318d54ff")
zi = Zlib::Inflate.new(Zlib::MAX_WBITS)
zi.inflate(cf.read)
----

==== Content-addressable filesystem

image:images/image-2.png[]

==== Refs

image:images/image-3.png[]

----
git push origin :topic
----

==== Fast forward

No need for a merge commit

== Aliases

* st = status
* ci = commit
* br = branch
* co = checkout
* com = checkout master
* cod = checkout develop
* di = diff
* dic = diff --cached
* lg = log -p
* lol = log --graph --decorate --pretty=oneline --abbrev-commit
* lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
* ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
* ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
* pl = pull
* plum = pull --rebase upstream master
* plom = pull --rebase origin master
* ps = push
* psom = push origin master
* psum = push upstream master
* psod = push origin develop
* rhh = reset --hard HEAD
* ffs = flow feature start
* fff = flow feature finish
* ffps = flow feature publish
* ffpl = flow feature pull
* ffc = flow feature checkout
* rmb = !rmb

== Hints

=== Amend

Overwrite the last commit

=== Interactive rebase

Prepare your Pull Request

=== Auto squash

----
git rebase -i --autosquash
----

=== Reset to a remote branch

----
git fetch
git reset --hard origin/develop
----

=== When to rebase

----
git fetch
git rebase origin/develop
----

=== Compare branches

----
git fetch
git log origin/develop..feature/1
----

=== Reflog

----
git reflog
git show HEAD@{5}
git show master@{yesterday}
----

=== Delete large files from history

----
git filter-branch --index-filter 'git rm --cached --ignore-unmatch git.tbz2' --all
git count-objects -v
----

=== Remove merged branches

[source, bash]
----
current_branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')

if [ "$current_branch" != "master" ]; then
  echo "WARNING: You are on branch $current_branch, NOT master."
fi
  echo "Fetching merged branches..."

git remote prune origin

remote_branches=$(git branch -r --merged | grep -v '/master$' | grep -v "/$current_branch$")

local_branches=$(git branch --merged | grep -v 'master$' | grep -v "$current_branch$")

if [ -z "$remote_branches" ] && [ -z "$local_branches" ]; then
  echo "No existing branches have been merged into $current_branch."
else
  echo "This will remove the following branches:"
  if [ -n "$remote_branches" ]; then
    echo "$remote_branches"
  fi
  if [ -n "$local_branches" ]; then
    echo "$local_branches"
  fi
  read -p "Continue? (y/n): " -n 1 choice
  echo
  if [ "$choice" == "y" ] || [ "$choice" == "Y" ]; then
    # Remove remote branches
    git push origin `git branch -r --merged | grep -v '/master$' | grep -v "/$current_branch$" | sed 's/origin\//:/g' | tr -d '\n'`
    # Remove local branches
    git branch -d `git branch --merged | grep -v 'master$' | grep -v "$current_branch$" | sed 's/origin\///g' | tr -d '\n'`
  else
    echo "No branches removed."
  fi
fi
----



